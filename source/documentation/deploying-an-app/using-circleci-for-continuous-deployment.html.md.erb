---
title: Continuous Deployment of an application using CircleCI and Helm
last_reviewed_on: 2020-04-22
review_in: 3 months
---

# <%= current_page.data.title %>


## Introduction
This document covers how to continuously deploy your application in the Cloud Platform.

> Note: This document is specific to using [CircleCI](https://circleci.com/) as the Continuous Integration method.

### Objective
By the end of the tutorial, you will have done the following:

- Created a Service Account for CircleCI in your namespace
- Generated a CircleCI configuration file in your application repository. The configuration file will authenticate with your chosen cluster, build a docker image and push it to ECR and upgrade your helm deployment with the new docker image.
- Have an automated CircleCI pipeline that upgrades your helm deployment when a new change is pushed to your master branch

### Requirements
It is assumed you have the following:

 - You have [created an environment for your application][env-create]
 - You have deployed the [multi-container rails app] to the 'live-1' cluster.
 - You have created an [ECR repository][ecr-setup]

### Creating a Service Account for CircleCI
As part of the CircleCI deployment pipeline, CircleCI will need to authenticate with the Kubernetes cluster. In order to do so, Kubernetes uses [Service Accounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/). Service Accounts provide an identity for processes that run in a cluster allowing the process to access the API server.

A Service Account is created in the [namespace creation github repository](https://github.com/ministryofjustice/cloud-platform-environments/tree/master/namespaces).

If you have not created a CircleCI service account along with the role / rolebinding then you may
use the below as an example:

```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: circleci
  namespace: <YOUR-NAMESPACE>

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: circleci
  namespace: <YOUR-NAMESPACE>
rules:
  - apiGroups:
      - ""
    resources:
      - "pods/portforward"
      - "deployment"
      - "secrets"
      - "services"
      - "pods"
      - "jobs"	
    verbs:
      - "patch"
      - "get"
      - "create"
      - "delete"
      - "list"
  - apiGroups: [extensions, apps, networking.k8s.io]
    resources:
      - "deployments"
      - "ingresses"
    verbs:
      - "get"
      - "update"
      - "delete"
      - "create"
      - "patch"

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: circleci
  namespace: <YOUR-NAMESPACE>
subjects:
- kind: ServiceAccount
  name: circleci
  namespace: <YOUR-NAMESPACE>
roleRef:
  kind: Role
  name: circleci
  apiGroup: rbac.authorization.k8s.io
```

Remember to replace `<YOUR-NAMESPACE>` with your namespace. Save the above as 'serviceaccount-circleci.yaml' under your [namespace folder](https://github.com/ministryofjustice/cloud-platform-environments/tree/master/namespaces).

Raise a PR for your service account creation. Once approved you should then see your new CircleCI service account in your namespace.


```yaml
  $ kubectl get serviceaccounts --namespace $ns
  NAME       SECRETS   AGE
  circleci   1         3h

  $ kubectl get serviceaccounts/circleci --namespace reference-app -o yaml
  apiVersion: v1
  kind: ServiceAccount
  ...
  secrets:
  - name: circleci-token-prlkp

  $ kubectl get secrets --namespace $ns
  NAME                   TYPE                                  DATA      AGE
  circleci-token-prlkp   kubernetes.io/service-account-token   3         3h

  $ kubectl get secrets/circleci-token-prlkp --namespace $ns -o yaml
  ...
  namespace: cm..cA==
  token: ZX...EE=
```

There will be a secret for the CircleCI service account. The secret contains the ca.crt and token which we will make available to the CircleCI image container as environment variables. This will allow it to authenticate against the cluster.
Access to the cluster is scoped for the namespace the service account was created in.

### Retrieving the Service Account credentials

Once the CircleCI service account is created above, you can grab the ca.crt as follows:

```yaml
k get secret <NAME-OF-CIRCLECI-SERVICE-ACCOUNT-SECRET> -o yaml -n <NAMESPACE | grep ca.crt
```

Likewise grab the CircleCI service accont token as follows:

```yaml
k get secret <NAME-OF-CIRCLECI-SERVICE-ACCOUNT-SECRET> -o yaml -n <NAMESPACE | grep token

The token will need to be decoded as follows:

echo <ENCODED_TOKEN> | base 64 --decode
```

Both the ca.crt and token will be added as environment variables by creating a context in the CircleCI console, that holds these values as shown below.


### Linking Repository to CircleCI
MoJ has as an account with CircleCI, please login to [CircleCI](https://circleci.com) using GitHub credentials. Select project, and if config.yml is in the repo CircleCI will build and run tests.

### Add variables to CircleCI
There is a number of environment variables that you will need to set on your CircleCI project in order to build a docker image, push it to the ECR and trigger a deployment in your environment. On the project page, click the cog icon in the left pane. Click on 'Contexts'. Click 'Create Context'.
Enter your preferred name for your context. Would make sense to add the environment as prefix to the context, i.e dev or prod.
The context will hold your environment variables and later be used by the docker executor of the pipeline.

Your context should look like as follows:

![CircleCI Context Environment Variables](/images/circleci_context.png)

Add the following environment variables:

#### AWS credentials

To authenticate with ECR, you will need to set:

- `AWS_DEFAULT_REGION` - would be `eu-west-2` for Cloud Platform clusters unless specified otherwise
- `AWS_ACCESS_KEY_ID`
- `AWS_SECRET_ACCESS_KEY`
- `ECR_ENDPOINT` is optional but useful if you want to avoid having to hardcode the full hostname of the registry

#### Kubernetes `ServiceAccount` credentials
Since a single CircleCI project will need to access multiple namespaces in kubernetes (the environments), it will also need to handle multiple credentials. To simplify authentication, we provide a helper script in our supported [build image](https://github.com/ministryofjustice/cloud-platform-tools-image). For a usage example, see [Deploy To Kubernetes][deploy-kubernetes] below.

There are four different variables that CircleCI will need to access the cluster:

- `K8S_CLUSTER_NAME` - the full name of the cluster (eg.: `live-1.cloud-platform.service.justice.gov.uk`)
- `K8S_NAMESPACE` - the name of the `Namespace` (see [Create a namespace][env-create])
- `K8S_CLUSTER_CERT` - the CA Certificate for the cluster, can be acquired from the `Secret` that is generated for the `ServiceAccount`
- `K8S_TOKEN` - the access token generated for the `ServiceAccount`. Please note, you should first base64 decode the token value you retrieve from the secret [in the previous section][create-sa], e.g. `echo <thereallylongstringthatyougetback> | base64 --decode`.

### Creating the config.yml
CircleCI uses a YAML file to identify how you want your testing environment set up and what tests you want to run. On CircleCI 2.0, this file must be called ```config.yml``` and must be in a hidden folder called ```.circleci``` .

[Tutorial](https://circleci.com/docs/2.0/tutorials/) on creating a config.yml file. As long as you are building a Docker image you can configure CircleCI however you wish. The only additional configuration you will need to add is to upload an image to ECR and deploy to Kubernetes:


### Upload to ECR

Below is an example how you can build and push an image to ECR:

```yaml

version: 2.1

workflows:
  test-env-vars:
    jobs:
      - build:
          context: <CONTEXT>
jobs:
  build:
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci-internal
      environment:
        IMAGE_URI: ${ECR_ENDPOINT}/<REPO-NAME>
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build application Docker image and push to ECR
        command: |
          $(aws ecr get-login --no-include-email)
          docker build -t ${ECR_ENDPOINT}/<REPO-NAME> rails-app
          docker push ${ECR_ENDPOINT}/<REPO-NAME>
```

### Deploy to Kubernetes

Below is example of how you can first authenticate and then deploy to kubernetes

```yaml

    - run:
        name: Authenticate with cluster
        command: |
          echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${K8S_CLUSTER_NAME}
          kubectl config set-credentials circleci --token=${K8S_TOKEN}
          kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
          kubectl config use-context ${K8S_CLUSTER_NAME}
    - run:
        name: Install demo helm chart
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; th en
            helm upgrade demo helm_deploy --install --namespace=${K8S_NAMESPACE}
          fi
          kubectl --namespace=${K8S_NAMESPACE} get pods
```

### Complete config file


Below is the complete config file

```yaml
version: 2.1

workflows:
  test-env-vars:
    jobs:
      - build:
          context: <CONTEXT>

jobs:
  build:
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci-internal
      environment:
        IMAGE_URI: ${ECR_ENDPOINT}/<REPO-NAME>
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build application Docker image and push to ECR
        command: |
          $(aws ecr get-login --no-include-email)
          docker build -t ${ECR_ENDPOINT}/<REPO-NAME> rails-app
          docker push ${ECR_ENDPOINT}/<REPO-NAME>
    - run:
        name: Authenticate with cluster
        command: |
          echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${K8S_CLUSTER_NAME}
          kubectl config set-credentials circleci --token=${K8S_TOKEN}
          kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
          kubectl config use-context ${K8S_CLUSTER_NAME}
    - run:
        name: Install demo helm chart
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; th en
            helm upgrade demo helm_deploy --install --namespace=${K8S_NAMESPACE}
          fi
          kubectl --namespace=${K8S_NAMESPACE} get pods
```

In the above config.yml replace `<CONTEXT>` with the name of the context you created. Also replace `<REPO-NAME>` with the name of your ECR repo excluding the tag name.

For example if my repo name is myteam/myrepo and my image tag is rails then I would replace `<REPO-NAME>` with myteam/myrepo:rails with the full repo URL being:

```bash
754256621582.dkr.ecr.eu-west-2.amazonaws.com/myteam/myrepo:rails
```

The above config.yml needs to be saved in a folder called .circleci in the root of your application repository.
For demo purposes you may use the [multi-demo container repository] (https://user-guide.cloud-platform.service.justice.gov.uk/documentation/deploying-an-app/multicontainer-app-deploy.html)

In the 'jobs' section we have a 'docker' executor where we will execute the steps inside the specified docker image. In this case we will run our pipeline steps inside a circle ci docker image.

We then have 3 key steps as follows:

1) Build / Push our application docker image.

   The multi-container demo repo has a folder called 'rails-app'. Inside this folder is a Dockerfile that defines the rail app. We run 'docker build..'
   inside this directory. The next command is to push the image into your ECR

2) Authenticate with cluster

In this step we issue a series of 'kubectl' commands to authenticate against the cluster, scoped to the namespace to which the service account belongs.
Earlier above we added the ${K8S_CLUSTER_CERT} and ${K8S_TOKEN} variables into our context in the CircleCI console. These variables are injected into the CircleCI image.
The kubectl commands can then use these env variables to authenticate against the cluster.


3) Run Helm Chart

In the multi-container repo there is folder that contains the helm chart for the rails demo app. This step will run the helm charts and deploy the frontend.

### Triggering the Pipeline

The pipeline will automatically be triggered when a change to the 'master' is commmited. CircleCI will execute the latest config.yml and execute each step in the pipeline.

Once all the above is complete make a change to the rails app. For example from the multi-container app repo you can amend the index html file located at
'/rails-app/app/views/home/index.html.erb' by changing the title and commit to master. You should now see a new job created in CircleCI

In CircleCI click on 'Jobs' > Click on your repo > Click on the new job > You shoud now see all your steps in the dashboard and their status

After the job has finished your rails app should now be up and running. You can access the app by visiting the DNS you specified in your helm chart values for the rails app.

[multi-container rails app]: /documentation/deploying-an-app/multicontainer-app-deploy.html
[ecr-setup]: /documentation/getting-started/ecr-setup.html#creating-an-ecr-repository
[env-create]: /documentation/getting-started/env-create.html#creating-a-cloud-platform-environment
[create-sa]: /documentation/deploying-an-app/using-circleci-for-continuous-deployment.html#creating-a-service-account-for-circleci
[deploy-kubernetes]: /documentation/deploying-an-app/using-circleci-for-continuous-deployment.html#deploy-to-kubernetes
